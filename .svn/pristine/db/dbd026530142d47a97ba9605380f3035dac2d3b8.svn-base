package cn.edu.gdut.zaoying;

import com.alibaba.fastjson.JSON;

import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.*;

/**
 * Created by 祖荣 on 2016/2/9 0009.
 */
public class EChartsAnnotationProcessor {
    public enum Type{BOOLEAN,COLOR,NUMBER,ARRAY,STRING,FUNCTION,ALL}

    static void extractJSONFromObject(Object object){
        HashMap<String,Object> head=new HashMap<>();
        Class clazz=object.getClass();
        Annotation annotation=clazz.getAnnotation(SingleChart.class);
        if(annotation!=null){
            SingleChart singleChart= (SingleChart) annotation;
            System.out.println(singleChart.exportTo());
            Field[] fields=clazz.getDeclaredFields();
            for(Field field:fields)
            {
                Object value=null;
                field.setAccessible(true);
                try {
                    value=field.get(object);
                    if(value instanceof Integer)if((int)value==0)value=null;
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                Annotation[] annotations=field.getDeclaredAnnotations();
                for(Annotation an:annotations){
                    if(value==null)addAnnotationToHashMap(head,an,getAnnotationValue(an));
                    else addAnnotationToHashMap(head,an,value);
                }
            }
            turnMapToArray(head,"series");
            turnMapToArray(head,"dataZoom");
            turnMapToArray(head,"visualMap");
            System.out.print(JSON.toJSONString(head));
        }
    }

    public static boolean checkClass(Annotation annotation){
        String canonical=annotation.annotationType().getCanonicalName();
        return canonical.startsWith("cn.edu.gdut.zaoying.Option.");
    }

    public static String getAnnotationValue(Annotation annotation){
        boolean b=checkClass(annotation);
        if(b){
            String string=annotation.toString();
            int start=string.indexOf('(');
            int end=string.lastIndexOf(')');
            if(end-start>1){
                int equal=string.indexOf('=')+1;
                return string.substring(equal,end);
            }
        }
        return null;
    }

    public static void addAnnotationToHashMap(HashMap<String,Object> head,Annotation annotation,Object value){
        String name=annotation.annotationType().getCanonicalName();
        String keys[]=name.substring(27).split("\\.");
        HashMap<String,Object> current = head;
        for (int i=0;i<keys.length-1;i++){
            String key=keys[i];
//            if(key.equals("series")||key.equals("dataZoom")||key.equals("visualMap")){
//                List<HashMap<String,Object>> list;
//                if(current.containsKey(key))
//                    list=(List<HashMap<String,Object>>)current.get(key);
//                else {
//                    list=new LinkedList<HashMap<String,Object>>();
//                    current.put(key,list);
//                }
//                current=new HashMap<String, Object>();
//                list.add(current);
//                continue;
//            }
            if(current.containsKey(key)){
                Object object=current.get(key);
                current= (HashMap<String, Object>)object;
            }
            else {
                HashMap<String,Object>newMap=new HashMap<String,Object>();
                current.put(key,newMap);
                current=newMap;
            }
        }
        String key=keys[keys.length-1];
        Object fit=value;
        switch (getAnnotationTypeByEndWord(key)){
            case BOOLEAN:
                key=key.substring(0,key.length()-7);
                break;
            case FUNCTION:
                key=key.substring(0,key.length()-8);
                break;
            case NUMBER:
            case STRING:
                key=key.substring(0,key.length()-6);
                break;
            case ARRAY:
                key=key.substring(0,key.length()-5);
                break;
            case COLOR:
                fit="#"+Integer.toHexString(Integer.parseInt((String) value));
                key=key.substring(0,key.length()-3);
                break;
        }
        current.put(Util.toFirstLetterLowerCase(key),fit);
    }

    public static Type getAnnotationTypeByEndWord(String name){
        if(name.endsWith("Boolean"))return Type.BOOLEAN;
        else if(name.endsWith("Hex"))return Type.COLOR;
        else if(name.endsWith("Number"))return Type.NUMBER;
        else if(name.endsWith("Array"))return Type.ARRAY;
        else if(name.endsWith("String"))return Type.STRING;
        else if(name.endsWith("Function"))return Type.FUNCTION;
        else return Type.ALL;
    }

    private static void turnMapToArray(HashMap<String,Object> head, String key){
        if(head.containsKey(key)){
            HashMap<String,Object> array= (HashMap<String, Object>) head.get(key);
            Set<String> keys=array.keySet();
            List<HashMap<String,Object>> list= new LinkedList<>();
            for(String k:keys){
                HashMap<String,Object> element= (HashMap<String, Object>) array.get(k);
                element.put("type",k);
                list.add(element);
            }
            head.put(key,list);
        }
    }
}
